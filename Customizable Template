import pandas as pd
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import ttk
import openpyxl
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter, column_index_from_string
from openpyxl.worksheet.datavalidation import DataValidation

# Global variables to store the uploaded data, excel file, and sheet names
data = None
excel_file = None
sheet_names = []

# Function to load Excel file and retrieve sheet names
def load_excel(file_path):
    try:
        global excel_file
        excel_file = pd.ExcelFile(file_path)
        global sheet_names
        sheet_names = excel_file.sheet_names
        return excel_file
    except Exception as e:
        messagebox.showerror("Error", f"Failed to load Excel file: {str(e)}")
        return None

# Function to load the selected sheet into a DataFrame
def load_selected_sheet(excel_file, sheet_name):
    try:
        global data
        data = pd.read_excel(excel_file, sheet_name=sheet_name)
        headers = list(data.columns)
        return headers
    except Exception as e:
        messagebox.showerror("Error", f"Failed to load sheet {sheet_name}: {str(e)}")
        return None

# Function to perform "Best of Best" analysis
def best_of_best_analysis(data, column_mapping):
    """Perform 'Best of Best' analysis with normalized fields."""
    bid_price_col = column_mapping['Bid Price']
    bid_volume_col = column_mapping['Bid Volume']
    baseline_price_col = column_mapping['Baseline Price']
    supplier_capacity_col = column_mapping['Supplier Capacity']
    bid_id_col = column_mapping['Bid ID']
    facility_col = column_mapping['Facility']
    incumbent_col = column_mapping['Incumbent']
    supplier_name_col = column_mapping['Supplier Name']
    grouping_col = column_mapping['Grouping']

    # Ensure that the necessary columns are numeric
    data[bid_volume_col] = pd.to_numeric(data[bid_volume_col], errors='coerce')
    data[supplier_capacity_col] = pd.to_numeric(data[supplier_capacity_col], errors='coerce')
    data[bid_price_col] = pd.to_numeric(data[bid_price_col], errors='coerce')
    data[baseline_price_col] = pd.to_numeric(data[baseline_price_col], errors='coerce')

    # Calculate Savings (we may still need it for other calculations)
    data['Savings'] = (data[baseline_price_col] - data[bid_price_col]) * data[bid_volume_col]

    # Create Supplier Name with Bid Price
    data['Supplier Name with Bid Price'] = data[supplier_name_col] + " ($" + data[bid_price_col].round(2).astype(str) + ")"

    # Calculate Baseline Spend
    data['Baseline Spend'] = data[bid_volume_col] * data[baseline_price_col]

    # Get unique Bid IDs
    bid_ids = data[bid_id_col].unique()

    # Prepare the Best of Best DataFrame
    best_of_best_list = []
    for bid_id in bid_ids:
        bid_row = data[data[bid_id_col] == bid_id].iloc[0]
        best_of_best_list.append({
            'Bid ID': bid_id,
            'Facility': bid_row[facility_col],
            'Grouping': bid_row[grouping_col],
            'Incumbent': bid_row[incumbent_col],
            'Baseline Price': bid_row[baseline_price_col],
            'Bid Volume': bid_row[bid_volume_col],
            'Baseline Spend': bid_row['Baseline Spend'],
            'Awarded Supplier': '',  # Will be selected via data validation
            'Awarded Supplier Price': None,  # Formula-based
            'Awarded Volume': None,  # Formula-based
            'Awarded Supplier Spend': None,  # Formula-based
            'Awarded Supplier Capacity': None,  # Formula-based
            'Savings': None  # Formula-based
        })

    best_of_best_df = pd.DataFrame(best_of_best_list)
    return best_of_best_df

# Function to save the results to Excel with formulas and data validation
def save_best_of_best_to_excel(best_of_best, output_path, column_mapping):
    try:
        # Write the dataframes to Excel
        with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
            # Write the Import File
            data.to_excel(writer, sheet_name="Import File", index=False)
            # Write the Customizable Template sheet
            best_of_best.to_excel(writer, sheet_name="Customizable Template", index=False)
            # The with statement will save and close the writer

        # Load the workbook to modify it
        workbook = load_workbook(output_path)
        best_sheet = workbook["Customizable Template"]
        import_sheet = workbook["Import File"]

        # Get the max row numbers
        max_row_best = best_sheet.max_row
        max_row_import = import_sheet.max_row

        # Create dictionaries to map column names to letters in Import File
        import_col_letter = {cell.value: cell.column_letter for cell in import_sheet[1]}
        best_col_letter = {cell.value: cell.column_letter for cell in best_sheet[1]}

        # Create supplier lists per Bid ID in hidden sheet
        supplier_list_sheet = workbook.create_sheet("SupplierLists")

        bid_id_col_import = column_mapping['Bid ID']
        supplier_name_with_bid_price_col_import = 'Supplier Name with Bid Price'

        # Create a dictionary to keep track of supplier list ranges per Bid ID
        bid_id_supplier_list_ranges = {}

        current_row = 1  # Starting row in SupplierLists sheet

        for bid_id in data[bid_id_col_import].unique():
            bid_data = data[data[bid_id_col_import] == bid_id]
            # Sort bid_data by bid price ascending
            bid_data_sorted = bid_data.sort_values(by=column_mapping['Bid Price'])
            suppliers = bid_data_sorted[supplier_name_with_bid_price_col_import].dropna().tolist()
            start_row = current_row
            for supplier in suppliers:
                supplier_list_sheet.cell(row=current_row, column=1, value=supplier)
                current_row += 1
            end_row = current_row - 1
            # Record the range for data validation
            bid_id_supplier_list_ranges[bid_id] = (start_row, end_row)
            # Add an empty row for separation
            current_row += 1

        # Now, set data validation and formulas in Customizable Template sheet
        for row in range(2, max_row_best + 1):
            bid_id = best_sheet[f"{best_col_letter['Bid ID']}{row}"].value

            if bid_id in bid_id_supplier_list_ranges:
                start_row, end_row = bid_id_supplier_list_ranges[bid_id]
                supplier_list_range = f"'SupplierLists'!$A${start_row}:$A${end_row}"

                # Set data validation for Awarded Supplier
                dv = DataValidation(type="list", formula1=f"{supplier_list_range}", allow_blank=True)
                best_sheet.add_data_validation(dv)
                dv.add(best_sheet[f"{best_col_letter['Awarded Supplier']}{row}"])

                # Awarded Supplier Price using SUMIFS
                formula_price = (
                    f"=IFERROR(SUMIFS('Import File'!${import_col_letter[column_mapping['Bid Price']]}$2:${import_col_letter[column_mapping['Bid Price']]}${max_row_import}, "
                    f"'Import File'!${import_col_letter[column_mapping['Bid ID']]}$2:${import_col_letter[column_mapping['Bid ID']]}${max_row_import}, A{row}, "
                    f"'Import File'!${import_col_letter['Supplier Name with Bid Price']}$2:${import_col_letter['Supplier Name with Bid Price']}${max_row_import}, {best_col_letter['Awarded Supplier']}{row}),\"\")"
                )
                best_sheet[f"{best_col_letter['Awarded Supplier Price']}{row}"].value = formula_price

                # Awarded Volume (Supplier Capacity) using SUMIFS
                formula_volume = (
                    f"=IFERROR(SUMIFS('Import File'!${import_col_letter[column_mapping['Supplier Capacity']]}$2:${import_col_letter[column_mapping['Supplier Capacity']]}${max_row_import}, "
                    f"'Import File'!${import_col_letter[column_mapping['Bid ID']]}$2:${import_col_letter[column_mapping['Bid ID']]}${max_row_import}, A{row}, "
                    f"'Import File'!${import_col_letter['Supplier Name with Bid Price']}$2:${import_col_letter['Supplier Name with Bid Price']}${max_row_import}, {best_col_letter['Awarded Supplier']}{row}),\"\")"
                )
                best_sheet[f"{best_col_letter['Awarded Volume']}{row}"].value = formula_volume

                # Awarded Supplier Capacity using the same formula
                best_sheet[f"{best_col_letter['Awarded Supplier Capacity']}{row}"].value = formula_volume

                # Awarded Supplier Spend
                formula_spend = (
                    f"=IF({best_col_letter['Awarded Supplier Price']}{row}<>\"\", {best_col_letter['Awarded Supplier Price']}{row}*{best_col_letter['Awarded Volume']}{row},\"\")"
                )
                best_sheet[f"{best_col_letter['Awarded Supplier Spend']}{row}"].value = formula_spend

                # Savings (adjusted formula)
                formula_savings = (
                    f"=IF({best_col_letter['Awarded Supplier Price']}{row}<>\"\", "
                    f"({best_col_letter['Baseline Price']}{row}-"
                    f"{best_col_letter['Awarded Supplier Price']}{row})*"
                    f"{best_col_letter['Bid Volume']}{row},\"\")"
                )
                best_sheet[f"{best_col_letter['Savings']}{row}"].value = formula_savings

                # Baseline Spend
                formula_baseline_spend = (
                    f"={best_col_letter['Baseline Price']}{row}*{best_col_letter['Bid Volume']}{row}"
                )
                best_sheet[f"{best_col_letter['Baseline Spend']}{row}"].value = formula_baseline_spend
            else:
                # No suppliers for this Bid ID
                pass

        # Optionally, hide the SupplierLists sheet
        supplier_list_sheet.sheet_state = 'hidden'

        # Apply formatting to "Import File" sheet
        currency_columns_import = ['Baseline Spend', 'Savings', column_mapping['Bid Price'], column_mapping['Baseline Price']]
        number_columns_import = [column_mapping['Bid Volume'], column_mapping['Supplier Capacity']]

        for col_name in currency_columns_import:
            col_letter = import_col_letter.get(col_name)
            if col_letter:
                for row in range(2, max_row_import + 1):
                    cell = import_sheet[f"{col_letter}{row}"]
                    cell.number_format = '$#,##0.00'

        for col_name in number_columns_import:
            col_letter = import_col_letter.get(col_name)
            if col_letter:
                for row in range(2, max_row_import + 1):
                    cell = import_sheet[f"{col_letter}{row}"]
                    cell.number_format = '#,##0'

        # Apply formatting to "Customizable Template" sheet
        currency_columns_best = ['Baseline Spend', 'Baseline Price', 'Awarded Supplier Price', 'Awarded Supplier Spend', 'Savings']
        number_columns_best = ['Bid Volume', 'Awarded Volume', 'Awarded Supplier Capacity']

        for col_name in currency_columns_best:
            col_letter = best_col_letter.get(col_name)
            if col_letter:
                for row in range(2, max_row_best + 1):
                    cell = best_sheet[f"{col_letter}{row}"]
                    cell.number_format = '$#,##0.00'

        for col_name in number_columns_best:
            col_letter = best_col_letter.get(col_name)
            if col_letter:
                for row in range(2, max_row_best + 1):
                    cell = best_sheet[f"{col_letter}{row}"]
                    cell.number_format = '#,##0'

        # Save the workbook
        workbook.save(output_path)
        messagebox.showinfo("Success", f"Customizable Analysis saved to {output_path}")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to save Excel file: {str(e)}")

# Function to handle the file upload and populate the sheet dropdown
def upload_file():
    file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
    if file_path:
        excel_file = load_excel(file_path)
        if excel_file:
            sheet_dropdown['values'] = sheet_names
            sheet_dropdown.current(0)

# Function to load the selected sheet after user selects a sheet
def load_sheet():
    selected_sheet = sheet_dropdown.get()
    if selected_sheet:
        headers = load_selected_sheet(excel_file, selected_sheet)
        if headers:
            populate_headers(headers)

def populate_headers(headers):
    for i, point in enumerate(data_points):
        dropdown = dropdowns[i]
        dropdown['values'] = headers
        try:
            dropdown.current(headers.index(point))
        except ValueError:
            dropdown.current(0)

# Function to run the Customizable Analysis
def run_best_of_best():
    if data is None:
        messagebox.showwarning("Data Missing", "Please upload an Excel file and select a sheet.")
        return

    column_mapping = {point: dropdowns[i].get() for i, point in enumerate(data_points)}
    result_df = best_of_best_analysis(data, column_mapping)
    output_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])

    if output_path:
        save_best_of_best_to_excel(result_df, output_path, column_mapping)

# Main UI Setup
root = tk.Tk()
root.title("Customizable Analysis")

load_button = tk.Button(root, text="Upload Excel File", command=upload_file)
load_button.grid(row=0, column=0, columnspan=2, pady=10)

sheet_label = tk.Label(root, text="Select Sheet")
sheet_label.grid(row=1, column=0, padx=10, pady=5, sticky='e')

sheet_dropdown = ttk.Combobox(root, state="readonly")
sheet_dropdown.grid(row=1, column=1, padx=10, pady=5)

load_sheet_button = tk.Button(root, text="Load Sheet", command=load_sheet)
load_sheet_button.grid(row=2, column=0, columnspan=2, pady=10)

data_points = [
    'Supplier Name', 'Incumbent', 'Facility', 'Baseline Price',
    'Bid Volume', 'Bid Price', 'Supplier Capacity', 'Bid ID', 'Grouping'
]

dropdowns = []
for i, point in enumerate(data_points):
    label = tk.Label(root, text=point)
    label.grid(row=i + 3, column=0, padx=10, pady=5, sticky='e')

    dropdown = ttk.Combobox(root, state="readonly")
    dropdown.grid(row=i + 3, column=1, padx=10, pady=5)
    dropdowns.append(dropdown)

run_button = tk.Button(root, text="Run Analysis", command=run_best_of_best)
run_button.grid(row=len(data_points) + 4, column=0, columnspan=2, pady=20)

root.mainloop()
